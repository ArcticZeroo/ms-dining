model Cafe {
  // string id from buy-ondemand
  id               String  @id
  name             String
  tenantId         String
  logoName         String?
  contextId        String
  displayProfileId String
  storeId          String  @default("")
  externalName     String  @default("")

  dailyStations         DailyStation[]
  dailyOrderingContexts DailyCafeOrderingContext[]
  reviews               Review[]
}

model MenuItem {
  // string id from buy-ondemand
  id             String  @id
  name           String
  normalizedName String  @default("")
  calories       Int
  maxCalories    Int
  description    String?
  imageUrl       String?
  price          Float

  // externalItemId String?
  externalLastUpdateTime DateTime?
  externalReceiptText    String?

  dailyMenuItems DailyMenuItem[]
  modifiers      MenuItemModifierEntry[]
  searchTags     SearchTag[]

  tags    String?
  reviews Review[]
}

model MenuItemModifierEntry {
  modifierId String
  menuItemId String
  index      Int

  modifier MenuItemModifier @relation(fields: [modifierId], references: [id], onDelete: Cascade)
  MenuItem MenuItem         @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@id([modifierId, menuItemId])
}

model MenuItemTag {
  // string id from buy-ondemand
  id   String @id
  name String
}

model SearchTag {
  name String @id @unique

  menuItems MenuItem[]
}

model MenuItemModifier {
  // string id from buy-ondemand
  id          String @id
  description String
  minimum     Int
  maximum     Int
  choiceType  String

  menuItems MenuItemModifierEntry[]
  choices   MenuItemModifierChoice[]
}

model MenuItemModifierChoice {
  // string id from buy-ondemand
  id          String @id
  description String
  price       Float

  modifierId String
  modifier   MenuItemModifier @relation(fields: [modifierId], references: [id], onDelete: Cascade)
}

model Station {
  // string id from buy-ondemand
  id      String  @id
  name    String
  logoUrl String?
  menuId  String

  dailyStations DailyStation[]
}

model DailyStation {
  id Int @id @default(autoincrement())

  dateString             String
  externalLastUpdateTime DateTime?

  stationId String
  station   Station @relation(fields: [stationId], references: [id])

  cafeId String
  cafe   Cafe   @relation(fields: [cafeId], references: [id])

  categories DailyCategory[]
}

model DailyCategory {
  id Int @id @default(autoincrement())

  name String

  stationId Int
  station   DailyStation @relation(fields: [stationId], references: [id], onDelete: Cascade)

  menuItems DailyMenuItem[]
}

model DailyMenuItem {
  id Int @id @default(autoincrement())

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  categoryId Int
  category   DailyCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model DailyCafeOrderingContext {
  dateString         String
  onDemandEmployeeId String
  onDemandTerminalId String
  profitCenterId     String
  profitCenterName   String
  storePriceLevel    String

  cafeId String
  cafe   Cafe   @relation(fields: [cafeId], references: [id], onDelete: Cascade)

  @@id([dateString, cafeId])
}

model User {
  id          String   @id @default(uuid())
  externalId  String
  provider    String
  displayName String
  role        String   @default("user")
  createdAt   DateTime @default(now())

  favoriteStations   String?
  favoriteMenuItems  String?
  homepageIds        String?
  lastSettingsUpdate DateTime?

  reviews Review[]

  @@unique([externalId, provider])
}

model Review {
  id        String   @id @default(uuid())
  // 0-10
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  cafeId String
  cafe   Cafe   @relation(fields: [cafeId], references: [id], onDelete: Cascade)
}
